/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package java_bot_gui;

import java.io.*;
import java.net.*;
import java.util.logging.Logger;
import javax.swing.*;
import java.net.URLEncoder;
import java.io.UnsupportedEncodingException;
import org.json.JSONArray;
import org.json.JSONObject;
import java.util.Vector;

public class UI extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(UI.class.getName());
    private static final String API_URL = "http://47.236.43.187:5000";
    private static final String STATIC_USER_ID = "825853575";

    public UI() {
        initComponents();
        setLocationRelativeTo(null);
    }

    private String httpGet(String endpoint) {
        try {
            URL url = new URL(API_URL + endpoint);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);
            int code = conn.getResponseCode();
            InputStream is = (code >= 200 && code < 300) ? conn.getInputStream() : conn.getErrorStream();
            StringBuilder response;
            try (BufferedReader br = new BufferedReader(new InputStreamReader(is, "utf-8"))) {
                response = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) response.append(line.trim());
            }
            return response.toString();
        } catch (IOException e) {
            return "Error: " + e.getMessage();
        }
    }

    private String httpPost(String endpoint, String json) {
        try {
            URL url = new URL(API_URL + endpoint);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json; utf-8");
            conn.setRequestProperty("Accept", "application/json");
            conn.setDoOutput(true);
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = json.getBytes("utf-8");
                os.write(input, 0, input.length);
            }
            int code = conn.getResponseCode();
            InputStream is = (code >= 200 && code < 300) ? conn.getInputStream() : conn.getErrorStream();
            StringBuilder response;
            try (BufferedReader br = new BufferedReader(new InputStreamReader(is, "utf-8"))) {
                response = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) response.append(line.trim());
            }
            return response.toString();
        } catch (IOException e) {
            return "Error: " + e.getMessage();
        }
    }
    
    
    
    private String getHelpText() {
        return "**Fitur Bot:**\n"
            + "💬 Chat dengan AI - Kirim pesan teks apa saja\n"
            + "📷 Analisis Gambar - Kirim foto dengan atau tanpa keterangan\n"
            + "🗂️ Gambar Dokumen - Kirim gambar sebagai dokumen\n\n"
            + "**Perintah Umum:**\n"
            + "/start - Memulai bot\n"
            + "/register - Daftar sebagai anggota\n"
            + "/help - Tampilkan bantuan ini\n\n"
            + "**Perintah Percakapan:**\n"
            + "/conversation - Kelola pengaturan memori percakapan\n"
            + "/clearconversation - Hapus riwayat percakapan\n"
            + "/myhistory - Lihat riwayat percakapan Anda\n\n"
            + "**Perintah Admin:**\n"
            + "/addkeyword `<kata_kunci> | <respon>` - Tambah kata kunci\n"
            + "/delkeyword `<kata_kunci>` - Hapus kata kunci\n"
            + "/listkeyword - Lihat semua kata kunci\n"
            + "/listmembers - Lihat semua pengguna\n"
            + "/addadmin `<user_id>` - Tambah admin\n"
            + "/broadcast `<pesan>` - Siaran pesan\n"
            + "/history [user_id] - Lihat riwayat pesan\n"
            + "/stats - Lihat statistik bot\n"
            + "/aistatus - Cek status AI\n";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        Broadcast = new javax.swing.JButton();
        Register = new javax.swing.JButton();
        addkeyword = new javax.swing.JButton();
        delkeyword = new javax.swing.JButton();
        listkeyword = new javax.swing.JButton();
        listmember = new javax.swing.JButton();
        stats = new javax.swing.JButton();
        aistatus = new javax.swing.JButton();
        command = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        dialog = new javax.swing.JTextArea();
        History = new javax.swing.JButton();
        myHistory = new javax.swing.JButton();
        conversation = new javax.swing.JButton();
        clearconversation = new javax.swing.JButton();
        addAdmin = new javax.swing.JButton();
        ViewData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ai Chat Bot");

        Broadcast.setText("Broadcast");
        Broadcast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BroadcastActionPerformed(evt);
            }
        });

        Register.setText("Register");
        Register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterActionPerformed(evt);
            }
        });

        addkeyword.setText("Addkeyword");
        addkeyword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addkeywordActionPerformed(evt);
            }
        });

        delkeyword.setText("Delkeyword");
        delkeyword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delkeywordActionPerformed(evt);
            }
        });

        listkeyword.setText("Listkeyword");
        listkeyword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listkeywordActionPerformed(evt);
            }
        });

        listmember.setText("List member");
        listmember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listmemberActionPerformed(evt);
            }
        });

        stats.setText("Stats");
        stats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsActionPerformed(evt);
            }
        });

        aistatus.setText("Aistatus");
        aistatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aistatusActionPerformed(evt);
            }
        });

        command.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandActionPerformed(evt);
            }
        });

        dialog.setColumns(20);
        dialog.setRows(5);
        jScrollPane1.setViewportView(dialog);

        History.setText("History");
        History.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistoryActionPerformed(evt);
            }
        });

        myHistory.setText("myHistory");
        myHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myHistoryActionPerformed(evt);
            }
        });

        conversation.setText("Conversation");
        conversation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conversationActionPerformed(evt);
            }
        });

        clearconversation.setText("Clear conversation");
        clearconversation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearconversationActionPerformed(evt);
            }
        });

        addAdmin.setText("addAdmin");
        addAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAdminActionPerformed(evt);
            }
        });

        ViewData.setText("View Data");
        ViewData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(command)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Broadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ViewData, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Register, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(listmember, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(myHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(History, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(aistatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(conversation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearconversation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(listkeyword, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(delkeyword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addkeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(command, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Register)
                            .addComponent(addkeyword)
                            .addComponent(myHistory)
                            .addComponent(conversation))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delkeyword)
                            .addComponent(listmember)
                            .addComponent(History)
                            .addComponent(clearconversation))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stats)
                            .addComponent(aistatus)
                            .addComponent(listkeyword)
                            .addComponent(addAdmin)))
                    .addComponent(ViewData, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Broadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void BroadcastActionPerformed(java.awt.event.ActionEvent evt) {                                          
    String msg = JOptionPane.showInputDialog(this, "Enter broadcast message:");
        if (msg != null && !msg.trim().isEmpty()) {
            String json = "{\"message\":\"" + msg.replace("\"", "\\\"") + "\"}";
            String resp = httpPost("/broadcast", json);
            dialog.append("Broadcast sent.\nResult: " + resp + "\n");
        }
    }                                         

    private void RegisterActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String botUsername = "tgspbo_bot"; // TODO: Replace with your bot's username (without @)
        String url = "https://t.me/" + botUsername;
        try {
            java.awt.Desktop.getDesktop().browse(new java.net.URI(url));
            dialog.append("Opening Telegram to register with the bot...\n");
        } catch (Exception e) {
            dialog.append("Failed to open Telegram link: " + e.getMessage() + "\n");
        }
    }                                        

    private void addkeywordActionPerformed(java.awt.event.ActionEvent evt) {                                           
    String keyword = JOptionPane.showInputDialog(this, "Enter keyword:");
        if (keyword == null || keyword.trim().isEmpty()) return;
        String response = JOptionPane.showInputDialog(this, "Enter response for keyword:");
        if (response == null || response.trim().isEmpty()) return;
        String cmd = "/addkeyword " + keyword.trim() + " | " + response.trim();
        String resp = httpPost("/chat", "{\"message\":\"" + cmd.replace("\"", "\\\"") + "\"}");
        dialog.append("Add keyword:\n" + resp + "\n");
    }                                          

    private void delkeywordActionPerformed(java.awt.event.ActionEvent evt) {                                           
    String keyword = JOptionPane.showInputDialog(this, "Enter keyword to delete:");
        if (keyword == null || keyword.trim().isEmpty()) return;
        String json = "{\"keyword\":\"" + keyword.replace("\"", "\\\"") + "\"}";
        String resp = httpPost("/delkeyword", json);
        dialog.append("Delete keyword:\n" + resp + "\n");
    }                                          

    private void listkeywordActionPerformed(java.awt.event.ActionEvent evt) {                                            
    String resp = httpGet("/listkeyword");
        dialog.append("Keywords:\n" + resp + "\n");
    }                                           

    private void listmemberActionPerformed(java.awt.event.ActionEvent evt) {                                           
    String resp = httpGet("/listmembers");
        dialog.append("Members:\n" + resp + "\n");
    }                                          

    private void statsActionPerformed(java.awt.event.ActionEvent evt) {                                      
    String resp = httpGet("/stats");
        dialog.append("Stats:\n" + resp + "\n");
    }                                     

    private void aistatusActionPerformed(java.awt.event.ActionEvent evt) {                                         
    String resp = httpGet("/aistatus");
        dialog.append("AI Status:\n" + resp + "\n");
    }                                        

    private void HistoryActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // Fetch global chat history
        String resp = httpGet("/history");
        dialog.append("History:\n" + resp + "\n");
    }                                       

    private void myHistoryActionPerformed(java.awt.event.ActionEvent evt) {                                          
    String userId = JOptionPane.showInputDialog(this, "Enter your user_id:");
        if (userId == null || userId.trim().isEmpty()) return;
        String resp = httpGet("/myhistory?user_id=" + userId.trim());
        dialog.append("My History:\n" + resp + "\n");
    }                                         

    private void commandActionPerformed(java.awt.event.ActionEvent evt) {                                        
    String cmd = command.getText().trim();
        if (!cmd.isEmpty()) {
            String resp = "";
            if (cmd.equalsIgnoreCase("/help")) {
                dialog.append(getHelpText() + "\n");
            } else if (cmd.equalsIgnoreCase("/start")) {
                String userId = JOptionPane.showInputDialog(this, "Enter your user_id:");
                if (userId == null || userId.trim().isEmpty()) {
                    dialog.append("user_id is required for /start\n");
                } else {
                    String endpoint = "/start?user_id=" + userId.trim();
                    resp = httpGet(endpoint);
                    dialog.append("Start:\n" + resp + "\n");
                }
            } else if (cmd.equalsIgnoreCase("/register")) {
                RegisterActionPerformed(null);
            } else if (cmd.startsWith("/conversation")) {
                conversationActionPerformed(null);
            } else if (cmd.equalsIgnoreCase("/clearconversation")) {
                clearconversationActionPerformed(null);
            } else if (cmd.equalsIgnoreCase("/myhistory")) {
                myHistoryActionPerformed(null);
            } else if (cmd.startsWith("/addkeyword")) {
                addkeywordActionPerformed(null);
            } else if (cmd.startsWith("/delkeyword")) {
                delkeywordActionPerformed(null);
            } else if (cmd.equalsIgnoreCase("/listkeyword")) {
                listkeywordActionPerformed(null);
            } else if (cmd.equalsIgnoreCase("/listmembers")) {
                listmemberActionPerformed(null);
            } else if (cmd.startsWith("/addadmin")) {
                addAdminActionPerformed(null);
            } else if (cmd.startsWith("/broadcast")) {
                String[] parts = cmd.split("\\s+", 2);
                if (parts.length == 2) {
                    String msg = parts[1].trim();
                    String json = "{\"message\":\"" + msg.replace("\"", "\\\"") + "\"}";
                    resp = httpPost("/broadcast", json);
                    dialog.append("Broadcast sent.\nResult: " + resp + "\n");
                } else {
                    BroadcastActionPerformed(null);
                }
            } else if (cmd.startsWith("/history")) {
                String[] parts = cmd.split("\\s+", 2);
                if (parts.length == 2) {
                    String userId = parts[1].trim();
                    resp = httpGet("/history?user_id=" + userId);
                } else {
                    resp = httpGet("/history");
                }
                dialog.append("History:\n" + resp + "\n");
            } else if (cmd.equalsIgnoreCase("/stats")) {
                statsActionPerformed(null);
            } else if (cmd.equalsIgnoreCase("/aistatus")) {
                aistatusActionPerformed(null);
            } else {
               
                String json = "{\"message\":\"" + cmd.replace("\"", "\\\"") + "\", \"user_id\":" + STATIC_USER_ID + "}";
                resp = httpPost("/chat", json);
                dialog.append("You: " + cmd + "\nBot: " + resp + "\n");
                
            }
            command.setText("");
        }
    }                                       

    private void conversationActionPerformed(java.awt.event.ActionEvent evt) {                                             
    String userId = JOptionPane.showInputDialog(this, "Enter your user_id:");
        if (userId == null || userId.trim().isEmpty()) {
            dialog.append("user_id is required for /conversation\n");
            return;
        }
        String args = JOptionPane.showInputDialog(this, "Enter arguments (e.g. on, off, limit 10) or leave blank:");
        String endpoint = "/conversation?user_id=" + userId.trim();
        if (args != null && !args.trim().isEmpty()) {
            String[] parts = args.trim().split("\\s+");
            for (String arg : parts) {
                try {
                    endpoint += "&arg=" + URLEncoder.encode(arg, "UTF-8");
                } catch (UnsupportedEncodingException e) {
                    dialog.append("Encoding error: " + e.getMessage() + "\n");
                    return;
                }
            }
        }
        String resp = httpGet(endpoint);
        dialog.append("Conversation:\n" + resp + "\n");
    }                                            

    private void clearconversationActionPerformed(java.awt.event.ActionEvent evt) {                                                  
    String userId = JOptionPane.showInputDialog(this, "Enter your user_id:");
        if (userId == null || userId.trim().isEmpty()) {
            dialog.append("user_id is required for /clearconversation\n");
            return;
        }
        String json = "{\"user_id\":" + userId.trim() + "}";
        String resp = httpPost("/clearconversation", json);
        dialog.append("Clear Conversation:\n" + resp + "\n");
    }                                                 

    private void addAdminActionPerformed(java.awt.event.ActionEvent evt) {                                         
    String userId = JOptionPane.showInputDialog(this, "Enter user_id to make admin:");
        if (userId == null || userId.trim().isEmpty()) {
            dialog.append("user_id is required for /addadmin\n");
            return;
        }
        String resp = httpPost("/addadmin", "{\"user_id\":\"" + userId.replace("\"", "\\\"") + "\"}");
        dialog.append("Add Admin:\n" + resp + "\n");
    }                                        

    private void ViewDataActionPerformed(java.awt.event.ActionEvent evt) {                                         
    // Prompt user to select data type
        String[] options = {"History", "Members", "Keywords"};
        String choice = (String) JOptionPane.showInputDialog(
            this,
            "Select data to view:",
            "View Data",
            JOptionPane.PLAIN_MESSAGE,
            null,
            options,
            options[0]
        );
        if (choice == null) return;

        String endpoint = "";
        switch (choice) {
            case "History":
                endpoint = "/history";
                break;
            case "Members":
                endpoint = "/listmembers";
                break;
            case "Keywords":
                endpoint = "/listkeyword";
                break;
            default:
                return;
        }
        String jsonResp = httpGet(endpoint);
        // Open DataViewer form
        DataViewer viewer = new DataViewer(this, choice, jsonResp);
        viewer.setVisible(true);
    }                                        
    
    public static Vector<Vector<Object>> jsonToTableData(JSONArray arr, Vector<String> columns) {
        Vector<Vector<Object>> data = new Vector<>();
        for (int i = 0; i < arr.length(); i++) {
            JSONObject obj = arr.getJSONObject(i);
            Vector<Object> row = new Vector<>();
            for (String col : columns) {
                row.add(obj.opt(col));
            }
            data.add(row);
        }
        return data;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UI().setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Broadcast;
    private javax.swing.JButton History;
    private javax.swing.JButton Register;
    private javax.swing.JButton ViewData;
    private javax.swing.JButton addAdmin;
    private javax.swing.JButton addkeyword;
    private javax.swing.JButton aistatus;
    private javax.swing.JButton clearconversation;
    private javax.swing.JTextField command;
    private javax.swing.JButton conversation;
    private javax.swing.JButton delkeyword;
    private javax.swing.JTextArea dialog;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listkeyword;
    private javax.swing.JButton listmember;
    private javax.swing.JButton myHistory;
    private javax.swing.JButton stats;
    // End of variables declaration                   
}
